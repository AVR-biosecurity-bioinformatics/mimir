/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    freyr Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {

    help                        = null


    slurm_account               = 'pathogens'                       // account to use on SLURM; default is for BASC only

    entrez_key                  = null                              // user-provided ENTREZ key to speed up NCBI API queries

    //// taxon and chunking options
    target_taxa                 = null                              // target taxa: either NCBI UIDs (ie. integers; preferred), or scientific taxon names; can be list separated by comma; string
    target_ranks                = null                              // taxonomic ranks of target_taxa to reduce ambiguity when matching; recommended if NCBI UIDs not provided to --target_taxa; can be comma-delimited list; string
    // chunk_rank                  = 'family'                          // taxonomic rank to chunk input taxon, set at lower rank for highly parallel environments; string
    chunk_size                  = 1000                              // number of sequences to process at a time (Genbank downloading, filtering etc.)

    //// outgroup parameters
    outgroups                   = null                              // list of taxa to fetch outgroup sequences from
    outgroup_chunk_rank         = 'family'                          // taxonomic rank to 
    outgroup_size               = null                              // number of sequences to return per outgroup chunk
    outgroup_genetic_codes      = null                              // list of genetic codes to use for each outgroup, see Biostrings::GENETIC_CODE_TABLE

    //// marker options
    marker                      = null                              // marker gene to extract; string (currently can only be one of: 'COI', '28S')
    // coding                      = true                              // sequence is coding sequence; boolean
    genetic_code                = 'SGC4'                            // genetic code of target taxon and marker, see Biostrings::GENETIC_CODE_TABLE; string

    //// internal sequences
    internal_seqs               = null                              // path to .fasta of high-quality internal sequences
    internal_taxfilter          = false                             // retain only internal sequences from taxa given in `--target_taxa`; boolean

    //// database options
    use_genbank                 = true                              // use NCBI GenBank database; boolean
    use_bold                    = true                              // use BOLD; boolean
    use_mito                    = true                              // use NCBI mitochondrial genomes (for mitochrondial loci only); boolean
    min_length                  = 1                                 // minimum length of sequences to retrieve; integer
    max_length                  = 2000                              // maximum length of sequences to retrieve; integer
    bold_db_path                = null                              // path to manually downloaded BOLD database .tar.gz file; string (path)
        //// NOTE: Above can be path to directory containing compressed or uncompressed database, or a path to the compressed database file
    bold_db_url                 = null                              // manually generated link to the current BOLD database; string (URL)
        //// NOTE: URLs must be supplied on bash command line in double quotes to avoid '&' causing issues
        //// NOTE: if both bold_db_path and bold_db_url are given, the pipeline will check for valid existing files before attemping to download
    bold_idmethod_filter        = false                             // removes BOLD sequences with an "identification_method" value that implies BOLD was used to classify sequences

    ///// PHMM and alignment options
    phmm_model                  = null                              // path to PHMM model (.rds file)
    trim_phmm                   = false                             // trim PHMM model to primer-binding sequences; boolean
    remove_primers              = false                             // if trimming PHMM model, remove primer sequences; boolean
    primer_fwd                  = null                              // forward primer sequence (5'-3') for trimming PHMM model; string
    primer_rev                  = null                              // reverse primer sequence (5'-3') for trimming PHMM model; string
    shave_to_phmm               = true                              // shave sequences by removing bases outside of PHMM alignment; boolean
    phmm_min_score              = 100                               // minimum specificity of PHMM match for retention (see ?aphid::Viterbi)
    phmm_min_length             = 100                               // minimum length of PHMM match for retention 
    remove_ambiguous            = true                              // remove sequences with ambiguous bases (ie. N) during alignment; boolean

    ///// clustering options
    cluster_rank                = 'genus'                           // taxonomic rank(s) to check clusters, can be a comma-delimited list (without spaces); string
    cluster_threshold           = 0.97                              // OTU clustering threshold; number (0-1)
    cluster_confidence          = 0.8                               // taxonomic proportion within a cluster to reject remaining sequences; number (0-1)
    cluster_nstart              = 20                                // size of random set used for k-means clustering, higher is better but slower; integer
    split_rank                  = 'genus'                          // taxonomic rank to split by for entry into [outlier filtering process] and then group pruning

    dist_threshold              = 0.05                              // intraspecific (Jukes-Cantor-corrected) genetic distance above which sequences will be removed as outliers; number (0-1) 

    //// pruning options
    max_group_size              = 1                                 // maximum number of sequences to retain per taxonomic ID; integer
    prune_method                = 'length'                          // method to prune sequences, "length" (smallest first) or "random"; string
    remove_unclassified         = 'all_ranks'                       // remove sequences with "Unclassified" for any (strict) or all (lenient) taxonomic ranks (TODO: make sure this doesn't remove unclassified internal sequences); string ('any_ranks'/'all_ranks'/'terminal'/'none')

    //// final formatting options
    add_root                    = true                              // add "Root" to reformatted taxonomic hierarchy in sequence headers; boolean
    aligned_output              = false                             // final database is aligned (both unaligned and aligned files produced); boolean
    // [choice of aligner?]
    compressed_output           = false                             // final database file is gzip compressed; boolean

    ///// model training options
    train_idtaxa                = false                             // whether to train an IDTAXA model from the final database; boolean
    idtaxa_max_group_size       = 10
    idtaxa_max_iterations       = 3
    idtaxa_allow_group_removal  = true

    ///// debugging options
    rdata                       = false                             // save all data/objects from process-level R sessions as .RData files in work dir; boolean
    all_fasta                   = false                             // save .fasta files within every process; boolean
    save_intermediate           = false                             // save combined .fasta files after each filtering step (in ./output/results); boolean
    save_input                  = false                             // save re-formatted input sequences as a combined .fasta file (in ./output/results); boolean

    ///// Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 16
    max_time                    = '240.h'

}


validation {

    failUnrecognisedParams      = false                             // run will fail if unrecognised parameters are given, not just give a warning

}


profiles {

    basc_slurm {
        process.executor                = 'slurm'
        process.queue                   = 'batch,shortrun,haswell'
        process.clusterOptions          = "--account $params.slurm_account"
        params.max_memory               = '512.GB'
        params.max_time                 = '168.h'
        params.max_cpus                 = 48
        executor.queueSize              = 200
        params.slurm_account            = 'pathogens'
        process.module                  = 'shifter' // this runs 'module load shifter' at the start of each process job
        // process.beforeScript            = 'module load shifter' // this would also do the same thing as above line
        shifter.enabled                 = true
    }       
    test { /// this profile should always be specified last to force the minimal resource requirements
        params.max_memory               = '2.GB'
        params.max_time                 = '10.m'
        params.max_cpus                 = 1
        params.phmm_model               = 'assets/folmer_fullength_model.rds'
    }       
    debug {     
        params.rdata                    = true
        params.all_fasta                = true
        params.save_intermediate        = true
    }           
    apptainer {         
        apptainer.enabled               = true
        apptainer.autoMounts            = true
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    docker {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = true
        docker.runOptions               = '-u $(id -u):$(id -g)'
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    podman {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = true        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    shifter {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = true
        singularity.enabled             = false
    }           
    singularity {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = true
        singularity.autoMounts          = true
    }


}


process {

    // error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // resources
    withLabel: very_small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 10.m * task.attempt, 'time'    ) }
    }
    withLabel: small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 30.m * task.attempt, 'time'    ) }
    }
    withLabel: medium {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h * task.attempt, 'time'     ) }
    }
    withLabel: high {
        cpus    = { check_max( 4 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: very_high {
        cpus    = { check_max( 16 * task.attempt  , 'cpus'    ) }
        memory  = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: long {
        time    = { check_max( 4.h * task.attempt, 'time'    ) }
    }
}


plugins {
    id 'nf-schema@2.0.0'                            // create schema to validate sample sheets and pipeline parameters
}


report {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/report.html"
}


trace {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/trace.tsv"
}


dag {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/dag.html"
    verbose             = true
}


timeline {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/timeline.html"
}


// Function to ensure that resource requirements don't go beyond a maximum limit
// from: https://github.com/nf-core/tools/blob/99961bedab1518f592668727a4d692c4ddf3c336/nf_core/pipeline-template/nextflow.config#L206-L237
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}